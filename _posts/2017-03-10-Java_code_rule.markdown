---
layout:     post
title:      "编程语言格式规范"
subtitle:   "继Java命名规范之后的编程格式规范"
date:       2017-03-10 19:36:00
author:     "Zicon"
header-img: "img/post-bg.jpg"
catalog: true
tags:
    - 规范约束
---

> “编程格式规范 吼”


# 前言

通过数次参与项目代码的编写与整理经历，以及在学习过程中无数次的被强调，Zicon深深的了解到代码格式化的重要性。

程序的编写过程中不仅要求代码没有错误，更要重视代码的格式。

一个好看的代码有利于让其他的开发者更好的阅读，一旦代码需要进行重构、修改，好的代码可以提高不少的开发效率。

---

# 正文

**首先，笔者先对自己使用过的编辑器稍作说明。**

 - Visual C++ 6.0以及Dev不提供代码的自动格式化；
 
 - Eclipse编辑器代码自动格式化快捷键为“Ctrl + shift + F”；
 
 - Android Studio编辑器代码自动格式化快捷键为“Ctrl + shift + L”；
 
 - 注意，这两个快捷键可能会与QQ热键造成冲突，关闭或修改QQ热键即可。


下面说到的格式规范1~3在自动格式化时一般会满足。

 - 大括号使用规则：左括号前不换行；右括号后有else等代码时不换行。

 - if、for、while、switch、do等关键字与左右括号之间必须加空格；任何运算符左右必须加空格。
 
**建议：**即使if判断后只跟一个语句也要加上大括号。

**原因：**便于阅读；就算日后要修改if的执行语句也比较方便。

例如：

```
if(flag == 0){
	return 0;
}
```
 -  换行规范：单行字符数最好不超过120个字符。
第二行相对第一行缩进4个空格，其余行与第二行对齐；运算符与下文一起换行；多个参数则在逗号后换行；小括号前不得换行。

 - 在方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间要插入空行；换而言之，具有相同语义、功能的语句要尽量放在一起。

 - 当一个类有多个同名方法时，按顺序放置，便于阅读。

 - 类内方法的定义顺序推荐采用：公有或保护>私有>getter、setter。 
 
**原因：**
	公有类的调用和维护是最为重要的，首屏展示最好；
	保护方法虽然只是应用于子类，也可能是“模板设计模式”下的核心方法（抽象类知识点）；
	私有方法外部一般不关心；而其余方法信息价值相对较低。 

# 后记
Zicon认为，在遵守Java命名规范之前，先要遵守编程语言的格式规范。



